"""
Django settings for webcat project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from webcat.env import load_env, parse_bool
from logging import getLogger

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = load_env('DEBUG', False, transform=parse_bool)
ENVIRONMENT: bool = load_env('ENVIRONMENT', 'development' if DEBUG else 'production', transform=parse_bool)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = load_env('SECRET_KEY', '3mp8xe^@y4l(21fe5isru^#rik46nm20*u9gz^2lxfoje=r4@s')
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG

if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    # Only allow certain hosts
    ALLOWED_HOSTS = load_env("ALLOWED_HOSTS", "").split(",")
    if len(ALLOWED_HOSTS) == 0:
        getLogger("settings").warning("$ALLOWED_HOSTS not set")

# Application definition

INSTALLED_APPS = [
    'webcat',
    'accounts',
    'feedback',
    # Third party
    'import_export',
    'rest_framework',
    'mjml',
    'polymorphic',
    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webcat.urls'

# Enable jinja2 templates, fallback to Django templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'webcat.jinja2.environment'
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webcat.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if load_env('IN_NIX_SHELL', False, transform=parse_bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": load_env('POSTGRES_DATABASE', 'webcat'),
            "USER": load_env('POSTGRES_USER', 'postgres'),
            "PASSWORD": load_env('POSTGRES_PASSWORD', ''),
            "HOST": load_env('POSTGRES_HOST', os.path.join(BASE_DIR, load_env("SOCKET_DIR"))),
            "PORT": load_env('POSTGRES_PORT', 5432, transform=int),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": load_env('POSTGRES_DATABASE', 'webcat'),
            "USER": load_env('POSTGRES_USER', 'webcat'),
            "PASSWORD": load_env('POSTGRES_PASSWORD', 'webcat'),
            "HOST": load_env('POSTGRES_HOST', "localhost"),
            "PORT": load_env('POSTGRES_PORT', 5432, transform=int),
            'TEST': {
                'NAME': 'webcat_test',
            },
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "accounts.User"

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = load_env("STATIC_DIR", os.path.join(BASE_DIR, 'static/'))

MEDIA_URL = '/media/'
MEDIA_ROOT = load_env("MEDIA_DIR", os.path.join(BASE_DIR, 'media/'))

# Email
EMAIL_BACKEND = "sgbackend.SendGridBackend"
SENDGRID_API_KEY = load_env("SENDGRID_API_KEY")
APP_EMAIL_ADDRESS = load_env("APP_EMAIL_ADDRESS", default="noreply@forfect.app")

# Sentry
sentry_sdk.init(load_env("SENTRY_DSN", default="https://04d54265f946462f96fb82fd3b1ee728@sentry.io/1369784"),
                integrations=[DjangoIntegration()])

MJML_HOST = load_env("MJML_HOST", "localhost")
MJML_PORT = load_env("MJML_PORT", 28101, transform=int)

# MJML
MJML_BACKEND_MODE = 'tcpserver'
MJML_TCPSERVERS = [
    (MJML_HOST, MJML_PORT),  # host and port
]
